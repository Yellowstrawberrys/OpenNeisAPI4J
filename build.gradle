plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

group 'me.yellowstrawberry'
version '0.0.2'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'Open Neis API'
                packaging = 'jar'
                description = 'open.neis.go.kr api wrapper'
                url = 'https://api.yellowstrawberry.me/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yellowstrawberry'
                        name = 'Yellowstrawberry'
                        email = 'eunsoo3009@hotmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Yellowstrawberrys/OpenNeisAPI4J.git'
                    developerConnection = 'scm:git:ssh://Yellowstrawberrys/OpenNeisAPI4J.git'
                    url = 'https://github.com/Yellowstrawberrys/OpenNeisAPI4J'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.property('ossrhUsername')
                password = project.property('ossrhPassword')
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation 'org.json:json:20230227'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign publishing.publications
    sign configurations.archives
}

java{
    withSourcesJar()
    withJavadocJar()
}
javadoc{
    options.addStringOption('encoding', 'UTF-8')
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
